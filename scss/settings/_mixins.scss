@use "sass:math";
//миксин "адаптивное свойство" меняет выбранное свойство в зависимости от разрешения $minSize - размер на разрешении 320px
// $maxWidth: 1920;
// $maxWidthContainer: 1170;
@mixin adaptive($property, $startSize, $minSize, $type) {
  $addSize: $startSize - $minSize;
  @if $type==1 {
    //только если меньше контейнера
    #{$property}: $startSize + px;
    @media (max-width:#{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize}* ((100vw - 320px) /#{$maxWidthContainer -
              320})
      );
    }
  } @else if $type==2 {
    //только если больше контейнера
    #{$property}: $startSize + px;
    @media (min-width:#{$maxWidthContainer + px}) {
      #{$property}: calc(
        #{$minSize + px} + #{$addSize}* ((100vw - 320px) /#{$maxWidth - 320})
      );
    }
  } @else if $type==3 {
    //всегда
    #{$property}: calc(
      #{$minSize + px} + #{$addSize}* ((100vw - 320px) /#{$maxWidth - 320})
    );
  }
}
//Функция REM
@function rem($px) {
  $result: math.div($px, 16) + rem;
  @return $result;
}
//Функция EM
//!проверить
@function em($px) {
  $result: math.div($px, 16) + em;
  @return $result;
}
//PRC функция
@function prc($pxOne, $pxTwo) {
  $result: math.div($pxOne, $pxTwo) * 100%;
  @return $result;
}

@mixin flex {
  display: flex;
}
@mixin flex-v-c {
  display: flex;
  align-items: center;
}
@mixin flex-h-c {
  display: flex;
  justify-content: center;
}
@mixin flex-c-c {
  display: flex;
  justify-content: center;
  align-items: center;
}